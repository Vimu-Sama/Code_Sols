leetcode->ques->vertical traversal of binary tree
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void helper(TreeNode* root, map<int, vector<int>> &m, multimap<int, int> &n, int hd=0, int vd=0)
    {
        if(root==NULL)
        {
            return ;
        }
        //cout<<root->val<<" "<<vd<<endl ;
        n.insert(pair<int, int>(root->val, vd)) ;
        if(m.find(hd)==m.end())
        {
            vector<int> temp;
            temp.push_back(root->val);
            m.insert({hd, temp}) ;
        }
        else
        {
            m[hd].push_back(root->val) ;
            int j= m[hd].size()-1 ;
           for(;j>0;j--)
           {
               int num= m[hd][j] ;
               if(((n.lower_bound(num)->second==n.lower_bound(m[hd][j-1])->second)&& num<m[hd][j-1])|| n.lower_bound(num)->second < n.lower_bound(m[hd][j-1])->second )
               {
                   int t= m[hd][j];
                   m[hd][j]= m[hd][j-1] ;
                   m[hd][j-1]= t;
               }
           }
        }
        helper(root->left, m, n, hd-1, vd+1) ;
        helper(root->right, m , n, hd+1, vd+1) ;
        return ;
        
    }
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        map<int,vector<int>> m;
        multimap<int, int> n;
        vector<vector<int>> temp;
        helper(root, m, n) ;
        map<int, vector<int>>::iterator itr ;
        for(itr=m.begin() ; itr!=m.end() ; ++itr)
        {
            /*vector<int> a;
            for(int i=0;i<itr->second.size(); ++i )
            {
                a.push_back(itr->second[i]) ;
            }*/
            temp.push_back(itr->second) ;
        }
        return temp;
    }
};